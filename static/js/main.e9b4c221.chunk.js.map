{"version":3,"sources":["components/Modals/GenerateTableModal/GenerateTableModal.tsx","components/Game/Game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GenerateTableModal","props","useState","numRows","setNumRows","numCols","setNumCols","generateEmptyTable","rows","i","push","Array","from","states","setStates","className","showModal","aria-label","onClick","handleClose","min","type","defaultValue","onChange","e","value","target","Number","preventDefault","handleSaveValuesColsRows","map","col","k","r","c","newGrid","produce","gridCopy","handleClick","savePattern","Game","refRows","useRef","current","refCols","running","setRunning","prevRunning","generation","setGeneration","speed","setSpeed","prevSpeed","setShowModal","patternImported","setPatternImported","useEffect","localStorage","getItem","Swal","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","then","result","isConfirmed","JSON","parse","position","showConfirmButton","timer","removeItem","generateNewState","cellStatus","Math","random","grid","runSimulation","useCallback","s","tableCopy","amountTrueNeighbors","reduce","trueNeighbors","neighbor","x","y","isNeighborOnBoard","totalTrueNeighbors","gen","genCopy","setTimeout","startStop","runStep","disabled","setItem","String","stringify","max","step","table","saveNewPattern","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9b4c221.chunk.js","sourcesContent":["import produce from 'immer';\nimport { useState } from 'react';\nimport { GenerateTableModalProps } from './types';\n\nimport './styles.css';\n\nconst GenerateTableModal = (props: GenerateTableModalProps) => {\n    /* Variable para guardar la cantidad de filas actuales */\n    const [numRows, setNumRows] = useState<number>(50);\n\n    /* Variable para guardar la cantidad de columnas */\n    const [numCols, setNumCols] = useState<number>(30);\n\n    /* Defino un a funcion para generar una tabla con todos los valores en false */\n    const generateEmptyTable = () => {\n        const rows = [];\n\n        for (let i = 0; i < numRows; i++) {\n            rows.push(Array.from(Array(numCols), () => false));\n        }\n\n        return rows;\n    };\n\n    /* Variable que va a guardar la matriz con los valores del estado actual */\n    const [states, setStates] = useState<Array<Array<boolean>>>(() => {\n        return generateEmptyTable();\n    });\n\n    /* Funcion que maneja el cambio del estado del \n        numero de filas */\n    const handleChangeRows = (value: string) => {\n        setNumRows(Number(value));\n    }\n\n    /* Funcion que maneja el cambio de estado del\n        numero de columnas */\n    const handleChangeCols = (value: string) => {\n        setNumCols(Number(value));\n    }\n\n    /* Funcion que se encagar de solicitar una nueva tabla\n        a partir de los nuevos valores de columnas y \n        filas */\n    const handleSaveValuesColsRows = (e: React.SyntheticEvent) => {\n        e.preventDefault();\n\n        setStates(generateEmptyTable());\n    }\n\n    /* Función que maneja el click en un a celda, y cambia su estado */\n    const handleClick = (r: number, c: number) => {\n        const newGrid = produce(states, gridCopy => {\n            gridCopy[r][c] = states[r][c] ? false : true;\n        });\n\n        setStates(newGrid);\n    }\n\n    /* Envia el nuevo patron a la vista principal y el numero de \n        filas y columnas */\n    const handleSavePattern = () => {\n        props.savePattern(numRows, numCols, states);\n    }\n\n    return (\n        <div className={`modal ${props.showModal && 'is-active'}`}>\n            <div className=\"modal-background\"></div>\n\n            <div className=\"modal-card\">\n                <header className=\"modal-card-head\">\n                    <p className=\"modal-card-title\">Generar patrón para tabla</p>\n                    <button className=\"delete\" aria-label=\"close\" onClick={() => props.handleClose()}></button>\n                </header>\n\n                <section className=\"modal-card-body\">\n                    <div className=\"columns is-vcentered options-container\">\n                        <div className=\"column\">\n                            <p\n                                className=\"bold mb-4\"\n                            >Seleccione los valores de las filas y las columnas:</p>\n\n                            <div className=\"field is-horizontal\">\n                                <div className=\"field-body\">\n                                    <div className=\"columns\">\n                                        <div className=\"column is-one-third\">\n                                            <div className=\"field is-horizontal\">\n                                                <div className=\"field-label is-normal\">\n                                                    <label className=\"label\">Filas</label>\n                                                </div>\n                                                <div className=\"field-body\">\n                                                    <input\n                                                        min=\"10\"\n                                                        className=\"input\"\n                                                        type=\"number\"\n                                                        defaultValue={numRows}\n                                                        onChange={(e) => handleChangeRows(e.target.value)}\n                                                    />\n                                                </div>\n                                            </div>\n                                        </div>\n\n                                        <div className=\"column is-one-third\">\n                                            <div className=\"field is-horizontal\">\n                                                <div className=\"field-label is-normal\">\n                                                    <label className=\"label\">Columnas</label>\n                                                </div>\n                                                <div className=\"field-body\">\n                                                    <input\n                                                        min=\"10\"\n                                                        className=\"input\"\n                                                        type=\"number\"\n                                                        defaultValue={numCols}\n                                                        onChange={(e) => handleChangeCols(e.target.value)}\n                                                    />\n                                                </div>\n                                            </div>\n                                        </div>\n\n                                        <div className=\"column is-one-third\">\n                                            <button\n                                                className=\"button is-info\"\n                                                type=\"submit\"\n                                                onClick={(e) => handleSaveValuesColsRows(e)}\n                                            >Guardar</button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"box\">\n                        <table>\n                            <tbody>\n                                {\n                                    states.map((rows, i) => {\n                                        return (\n                                            <tr key={i}>\n                                                {\n                                                    rows.map((col, k) => {\n                                                        return (\n                                                            <td\n                                                                key={`${i},${k}`}\n                                                                className={col ? 'alive' : 'dead'}\n                                                                onClick={() => handleClick(i, k)}\n                                                            />\n                                                        )\n                                                    })\n                                                }\n                                            </tr>\n                                        )\n                                    })\n                                }\n                            </tbody>\n                        </table>\n                    </div>\n                </section>\n\n                <footer className=\"modal-card-foot\">\n                    <button\n                        className=\"button is-warning\"\n                        onClick={() => handleSavePattern()}\n                    >Save changes</button>\n\n                    <button\n                        className=\"button\"\n                        onClick={() => props.handleClose()}\n                    >Cancel</button>\n                </footer>\n            </div>\n        </div>\n    );\n}\n\nexport default GenerateTableModal;","import React, { useCallback, useEffect, useRef, useState } from \"react\";\n/**\n    Para ir actualizando los estados de la tabla utilizo la libreria immer.\n    Trate de actualizar el estado de la tabla con una funcion normal, pero\n    no logre que funcione de forma correcta.\n    \n    Investigando y buscando ejemplos, encontre esta libreria que fue creada\n    para manejar mejor la inmutabilidad de los estados, y que cuando actualizamos\n    uno, tengamos el resultado esperado. Sin la libreria me pasaba que asignaba\n    una nueva tabla de valores pero la vista no se renderizaba de vuelta.\n    \n    Voy a utilizar el metodo produce,que toma el estado actual del elemento y\n    una funcion que expresa lo que va a pasar con el estado. Durante el proceso, \n    el estado actual del estado no se modifica. La funcion produce, no retorna nada\n    simplemente nos deja hacer los cambios que necesitamos en el estado, y luego \n    se encarga de actualizarlo.\n*/\nimport produce from \"immer\";\n\nimport './styles.css';\nimport Swal from \"sweetalert2\";\nimport GenerateTableModal from \"../Modals/GenerateTableModal/GenerateTableModal\";\n\nconst Game = () => {\n    /* Variable para guardar la cantidad de filas actuales */\n    const [numRows, setNumRows] = useState<number>(50);\n\n    /* Ref para acceder al numero de filas cuando corre el algoritmo */\n    const refRows = useRef(numRows);\n    refRows.current = numRows;\n\n    /* Variable para guardar la cantidad de columnas */\n    const [numCols, setNumCols] = useState<number>(30);\n\n    /* Ref para acceder al numero de columnas cuando corre el algoritmo */\n    const refCols = useRef(numCols);\n    refCols.current = numCols;\n\n    /* Defino un a funcion para generar una tabla con todos los valores en false */\n    const generateEmptyTable = () => {\n        const rows = [];\n\n        for (let i = 0; i < numRows; i++) {\n            rows.push(Array.from(Array(numCols), () => false));\n        }\n\n        return rows;\n    };\n\n    /* Variable que va a guardar la matriz con los valores del estado actual */\n    const [states, setStates] = useState<Array<Array<boolean>>>(() => {\n        return generateEmptyTable()\n    });\n\n    /* Variable para guardar si el algoritmo esta corriendo o no */\n    const [running, setRunning] = useState<boolean>(false);\n\n    /* Referencia para poder utilizar luego y ver si el algoritmo esta corriendo */\n    const prevRunning = useRef(running);\n    prevRunning.current = running;\n\n    /* Variable que actua como contador para ver las repeticiones del algoritmo */\n    const [generation, setGeneration] = useState<number>(0);\n\n    /* Variable para guardar la velocidad actual y poder ir cambiandola */\n    const [speed, setSpeed] = useState<number>(300);\n\n    /* Referencia para poder utilizar luego la velocidad cuando corre el algoritmo */\n    const prevSpeed = useRef(speed);\n    prevSpeed.current = speed;\n\n    /* Variabla para controlar si mostrar el modal para generar un patron para la tabla */\n    const [showModal, setShowModal] = useState<boolean>(false);\n\n    /* Variabla para saber si el patron actual fue importado o no. En caso de haber sido\n        importado, no se genera un nuevo patron */\n    const [patternImported, setPatternImported] = useState<boolean>(false);\n\n    /* Cuando inicia la apliaciacion, verifico si existe una partida guardada */\n    useEffect(() => {\n        if (localStorage.getItem('states')) {\n            Swal.fire({\n                title: 'Existe una partida guardada',\n                text: '¿Desea seguir con la partida?',\n                icon: 'info',\n                showCancelButton: true,\n                confirmButtonColor: '#3085d6',\n                cancelButtonColor: '#d33',\n                confirmButtonText: 'Si',\n                cancelButtonText: 'No'\n            }).then((result) => {\n                if (result.isConfirmed) {\n                    let states = localStorage.getItem('states')\n                    if (states) setStates(JSON.parse(states));\n\n                    let numCols = localStorage.getItem('numCols');\n                    if (numCols) setNumCols(Number(numCols));\n\n                    let numRows = localStorage.getItem('numRows');\n                    if (numRows) setNumRows(Number(numRows));\n\n                    let generation = localStorage.getItem('generation');\n                    if (generation) setGeneration(Number(generation));\n\n                    let speed = localStorage.getItem('speed');\n                    if (speed) setSpeed(Number(speed));\n\n                    Swal.fire({\n                        position: 'bottom-end',\n                        icon: 'success',\n                        title: 'Importada!',\n                        text: 'Su partida ha sido importada correctamente',\n                        showConfirmButton: false,\n                        timer: 1500\n                    });\n                } else {\n                    localStorage.removeItem('states');\n                    localStorage.removeItem('numCols');\n                    localStorage.removeItem('numRows');\n                    localStorage.removeItem('generation');\n                    localStorage.removeItem('speed');\n                }\n            });\n        }\n    }, [])\n\n    /* Funcion que genera una nueva matriz para el primer estado cuando se inicializa\n        el algoritmo. Genera valores random y asi puedo generar la primer matriz \n        a partir de la cual se van a ir calculando los nuevos estados */\n    const generateNewState = (cellStatus = () => Math.random() < 0.3) => {\n        /* Utilizando el metodo produce de immer me permite generar una nueva tabla\n            y manejar mejor los estados */\n        const newGrid = produce(states, gridCopy => {\n            const grid: Array<Array<boolean>> = [];\n\n            for (let r = 0; r < numRows; r++) {\n                grid[r] = [];\n\n                for (let c = 0; c < numCols; c++) {\n                    /* Utilizo el cellStatus() para ir generando valores true y false random */\n                    grid[r][c] = cellStatus();\n                }\n            }\n            return grid;\n        });\n\n        setStates(newGrid);\n    };\n\n    /* En esta funcion ejecutamos el algoritmo que toma la variable speed que\n        tenemos y setTimeout para poder ejecutar el algoritmo que actualiza la\n        tabla */\n    const runSimulation = useCallback(() => {\n        /* En caso de que ya no estemos mas con running en true, lo que hacemos\n            es returnar sin actualizar el estado de la tabla y cortando la \n            recursividad de la funcion */\n        if (!prevRunning.current) {\n            return;\n        }\n\n        setStates(s => {\n            /* Dejo que la asignacion la haga immer a traves del metodo produce */\n            return produce(s, tableCopy => {\n                /** Funcion que se encarga de calcular el total de vecinos vivos de cada celda */\n                const amountTrueNeighbors = (r: number, c: number) => {\n                    const neighbors = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n\n                    return neighbors.reduce((trueNeighbors, neighbor) => {\n                        const x = r + neighbor[0];\n                        const y = c + neighbor[1];\n                        const isNeighborOnBoard = (x >= 0 && x < refRows.current && y >= 0 && y < refCols.current);\n                        /* No es necesario contar mas de tres vecinos */\n                        if (trueNeighbors < 4 && isNeighborOnBoard && s[x][y]) {\n                            return trueNeighbors + 1;\n                        } else {\n                            return trueNeighbors;\n                        }\n                    }, 0);\n                };\n\n                for (let r = 0; r < refRows.current; r++) {\n                    for (let c = 0; c < refCols.current; c++) {\n                        const totalTrueNeighbors = amountTrueNeighbors(r, c);\n\n                        if (!s[r][c]) {\n                            if (totalTrueNeighbors === 3) tableCopy[r][c] = true;\n                        } else {\n                            if (totalTrueNeighbors < 2 || totalTrueNeighbors > 3) tableCopy[r][c] = false;\n                        }\n                    }\n                }\n            });\n        });\n\n        /* Aumento la generacion actual */\n        setGeneration(gen => {\n            return produce(gen, genCopy => {\n                return genCopy + 1;\n            });\n        });\n\n        /* Timeout que llama a recursivamente a la función mientras que estemos en ejecucion */\n        setTimeout(runSimulation, prevSpeed.current);\n    }, []);\n\n    /* Funcion para iniciar o parar la ejecucion del algoritmo */\n    const startStop = () => {\n        /* En caso que estemos comenzando la ejecucion, generamos un estado para la tabla */\n        if (generation === 0 && !patternImported) {\n            generateNewState();\n        }\n\n        /* Cambiamos el estado de running para comenzar o parar */\n        setRunning(!running);\n\n        /* Verifico por el contrario del valor de running, ya que sel setRunning actualiza\n            asincronamente. En caso de ser true, comienzo con el algoritmo */\n        if (!running) {\n            prevRunning.current = true;\n            runSimulation();\n        }\n    }\n\n    /* Funcion para generar el nuevo estado de la tabla que solo corre una vez */\n    const runStep = useCallback(() => {\n        /* Genero el nuevo estado de la tabla */\n        setStates(s => {\n            /* Dejo que la asignacion la haga immer a traves del metodo produce */\n            return produce(s, tableCopy => {\n                /** Funcion que se encarga de calcular el total de vecinos vivos de cada celda */\n                const amountTrueNeighbors = (r: number, c: number) => {\n                    const neighbors = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n\n                    return neighbors.reduce((trueNeighbors, neighbor) => {\n                        const x = r + neighbor[0];\n                        const y = c + neighbor[1];\n                        const isNeighborOnBoard = (x >= 0 && x < refRows.current && y >= 0 && y < refCols.current);\n                        /* No es necesario contar mas de tres vecinos */\n                        if (trueNeighbors < 4 && isNeighborOnBoard && s[x][y]) {\n                            return trueNeighbors + 1;\n                        } else {\n                            return trueNeighbors;\n                        }\n                    }, 0);\n                };\n\n                for (let r = 0; r < refRows.current; r++) {\n                    for (let c = 0; c < refCols.current; c++) {\n                        const totalTrueNeighbors = amountTrueNeighbors(r, c);\n\n                        if (!s[r][c]) {\n                            if (totalTrueNeighbors === 3) tableCopy[r][c] = true;\n                        } else {\n                            if (totalTrueNeighbors < 2 || totalTrueNeighbors > 3) tableCopy[r][c] = false;\n                        }\n                    }\n                }\n            });\n        });\n\n        /* Aumento la generacion actual */\n        setGeneration(gen => {\n            return produce(gen, genCopy => {\n                return genCopy + 1;\n            });\n        });\n    }, []);\n\n    /* Funcion para generar el siguiente paso */\n    const step = () => {\n        /* En caso que estemos comenzando la ejecucion, generamos un estado para la tabla */\n        if (generation === 0 && !patternImported) {\n            generateNewState();\n        }\n\n        /* Ejecuto el sigiuente paso */\n        runStep();\n    }\n\n    /* Función para reiniciarl os estados al inicio */\n    const restart = () => {\n        setPatternImported(false);\n        setRunning(false);\n        setGeneration(0);\n        setStates(() => {\n            return generateEmptyTable()\n        });\n    }\n\n    /* Función que maneja el click en un a celda, y cambia su estado */\n    const handleClick = (r: number, c: number) => {\n        const newGrid = produce(states, gridCopy => {\n            gridCopy[r][c] = states[r][c] ? false : true;\n        });\n\n        setStates(newGrid);\n    }\n\n    /* Funcion que maneja el cambio de estado del speed */\n    const handleChangeSlider = (value: string) => {\n        setSpeed(Number(value));\n        prevSpeed.current = Number(value);\n    }\n\n    /* Funcion que maneja el cambio del estado del \n        numero de filas */\n    const handleChangeRows = (value: string) => {\n        setNumRows(Number(value));\n    }\n\n    /* Funcion que maneja el cambio de estado del\n        numero de columnas */\n    const handleChangeCols = (value: string) => {\n        setNumCols(Number(value));\n    }\n\n    /* Funcion que se encagar de solicitar una nueva tabla\n        a partir de los nuevos valores de columnas y \n        filas */\n    const handleSaveValuesColsRows = (e: React.SyntheticEvent) => {\n        e.preventDefault();\n\n        generateNewState();\n    }\n\n    /* Funcion que se encarga de guardar la partida */\n    const saveMatch = () => {\n        Swal.fire({\n            title: '¿Seguro que desea guardar la partida?',\n            icon: 'info',\n            showCancelButton: true,\n            confirmButtonColor: '#3085d6',\n            cancelButtonColor: '#d33',\n            confirmButtonText: 'Si, guardar!',\n            cancelButtonText: 'Cancelar'\n        }).then((result) => {\n            if (result.isConfirmed) {\n                localStorage.setItem('numCols', String(numCols));\n                localStorage.setItem('numRows', String(numRows));\n                localStorage.setItem('generation', String(generation));\n                localStorage.setItem('speed', String(speed));\n                localStorage.setItem('states', JSON.stringify(states));\n\n                Swal.fire({\n                    position: 'bottom-end',\n                    icon: 'success',\n                    title: 'Guardada!',\n                    text: 'Su partida ha sido guardada',\n                    showConfirmButton: false,\n                    timer: 1500\n                });\n            }\n        });\n    }\n\n    /* Funcion que toma el patron que envia el modal y lo guarda */\n    const saveNewPattern = (numRows: number, numCols: number, table: Array<Array<boolean>>) => {\n        setNumRows(numRows);\n        setNumCols(numCols);\n        setStates(table);\n        setGeneration(0);\n        setSpeed(300);\n        setPatternImported(true);\n\n        setShowModal(false);\n\n        Swal.fire({\n            position: 'bottom-end',\n            icon: 'success',\n            title: 'Patron importado correctamente',\n            showConfirmButton: false,\n            timer: 1500\n        });\n    }\n\n    return (\n        <>\n            <div className=\"columns is-vcentered options-container\">\n                <div className=\"column\">\n                    <div className=\"columns\">\n                        <div className=\"column\">\n                            <button\n                                className=\"button is-primary\"\n                                onClick={() => startStop()}\n                                disabled={running}\n                            >\n                                {(generation !== 0) ? 'Continuar' : 'Iniciar'}\n                            </button>\n                        </div>\n\n                        <div className=\"column\">\n                            <button\n                                className=\"button is-primary\"\n                                onClick={() => startStop()}\n                                disabled={!running}\n                            >\n                                Detener\n                            </button>\n                        </div>\n\n                        <div className=\"column\">\n                            <button\n                                className=\"button is-primary\"\n                                onClick={() => step()}\n                                disabled={running}\n                            >\n                                Paso\n                            </button>\n                        </div>\n\n                        <div className=\"column\">\n                            <button\n                                className=\"button is-primary\"\n                                onClick={() => restart()}\n                                disabled={running || generation === 0}\n                            >\n                                Reiniciar\n                            </button>\n                        </div>\n\n                        <div className=\"column\">\n                            <button\n                                className=\"button is-link\"\n                                onClick={() => saveMatch()}\n                                disabled={running || generation === 0}\n                            >\n                                Guardar Partida\n                            </button>\n                        </div>\n\n                        <div className=\"column\">\n                            <button\n                                className=\"button is-link\"\n                                onClick={() => setShowModal(true)}\n                                disabled={running}\n                            >\n                                Generar tabla\n                            </button>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"column\">\n                    <p>Generación: {(generation !== 0) ? generation : '#'}</p>\n                </div>\n            </div>\n\n            <div className=\"columns is-vcentered options-container\">\n                <div className=\"column\">\n                    <p className=\"bold mb-4\">Seleccione la velocidad que desea:</p>\n\n                    <input\n                        min=\"50\"\n                        max=\"3000\"\n                        defaultValue={speed}\n                        step=\"50\"\n                        type=\"range\"\n                        onChange={(e) => handleChangeSlider(e.target.value)}\n                    />\n                    {speed}\n                </div>\n\n                <div className=\"column\">\n                    <p\n                        className=\"bold mb-4\"\n                    >Seleccione los valores de las filas y las columnas:</p>\n\n                    <fieldset disabled={running}>\n                        <div className=\"field is-horizontal\">\n                            <div className=\"field-body\">\n                                <div className=\"columns\">\n                                    <div className=\"column is-one-third\">\n                                        <div className=\"field is-horizontal\">\n                                            <div className=\"field-label is-normal\">\n                                                <label className=\"label\">Filas</label>\n                                            </div>\n                                            <div className=\"field-body\">\n                                                <input\n                                                    min=\"10\"\n                                                    className=\"input\"\n                                                    type=\"number\"\n                                                    defaultValue={numRows}\n                                                    onChange={(e) => handleChangeRows(e.target.value)}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    <div className=\"column is-one-third\">\n                                        <div className=\"field is-horizontal\">\n                                            <div className=\"field-label is-normal\">\n                                                <label className=\"label\">Columnas</label>\n                                            </div>\n                                            <div className=\"field-body\">\n                                                <input\n                                                    min=\"10\"\n                                                    className=\"input\"\n                                                    type=\"number\"\n                                                    defaultValue={numCols}\n                                                    onChange={(e) => handleChangeCols(e.target.value)}\n                                                />\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    <div className=\"column is-one-third\">\n                                        <button\n                                            className=\"button is-info\"\n                                            type=\"submit\"\n                                            onClick={(e) => handleSaveValuesColsRows(e)}\n                                        >Guardar</button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </fieldset>\n                </div>\n            </div>\n\n            <div className=\"box\">\n                <table>\n                    <tbody>\n                        {\n                            states.map((rows, i) => {\n                                return (\n                                    <tr key={i}>\n                                        {\n                                            rows.map((col, k) => {\n                                                return (\n                                                    <td\n                                                        key={`${i},${k}`}\n                                                        className={col ? 'alive' : 'dead'}\n                                                        onClick={() => handleClick(i, k)}\n                                                    />\n                                                )\n                                            })\n                                        }\n                                    </tr>\n                                )\n                            })\n                        }\n                    </tbody>\n                </table>\n            </div>\n\n            {\n                showModal &&\n                <GenerateTableModal\n                    showModal={showModal}\n                    handleClose={() => setShowModal(false)}\n                    savePattern={(numRows: number, numCols: number, table: Array<Array<boolean>>) =>\n                        saveNewPattern(numRows, numCols, table)}\n                />\n            }\n        </>\n    );\n}\n\nexport default Game;\n","import React from 'react';\nimport './App.css';\nimport Game from './components/Game/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <section className=\"section\">\n        <div className=\"container\">\n          <h1 className=\"title\">\n            Juego de la Vida\n          </h1>\n\n          <Game />\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bulma/css/bulma.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}